#!/bin/bash

# args from ansible will become named vars,
# e.g. racktables_facts: skip_ports=lo,virbr will make var $skip_ports="lo,virbr"
source $1
if [[ -n $skip_ports ]]; then
    skip_ports=$(echo $skip_ports | tr ',' '|')
fi

### Identification
name=$(hostname)
fqdn=$(hostname -f)
vendor=$(cat /sys/devices/virtual/dmi/id/sys_vendor)

case $vendor in
	"HP")
	# asset_no=
	product_name=$(cat /sys/devices/virtual/dmi/id/product_name | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	hw_type="HP%GPASS%${product_name}"
	;;
	"Intel Corporation")
	# asset_no=
	board_name=$(cat /sys/devices/virtual/dmi/id/board_name | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	hw_type="Intel%GPASS%${board_name}"
	;;
	"Supermicro")
	# asset_no=
	board_name=$(cat /sys/devices/virtual/dmi/id/board_name | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	hw_type="SuperMicro 1U%GPASS%${board_name}"
	;;
	"Red Hat")
	# asset_no=
	;;
	*)
	# example of machine specific asset_no
	# asset_no=$(cat /sys/devices/virtual/dmi/id/chassis_serial | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	;;
esac

### asset_no will be UUID for all machine types
asset_no=$(cat /sys/devices/virtual/dmi/id/product_uuid | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

### Type
machine_type=$(grep -q hypervisor /proc/cpuinfo && echo "vm" || echo "server")
### Hypervisor
[[ -d /etc/libvirt/qemu ]] && hypervisor="Yes" || hypervisor="No"
### SW Type
sw_type=$(cat /etc/redhat-release | grep -Po "CentOS|[[:digit:]\.]+" | xargs | sed -e 's/ /%GPASS%/')

### VM list
if [[ $hypervisor == "Yes" ]]; then
    vm_list=$(find /etc/libvirt/qemu/ -maxdepth 1 -name '*.xml'| xargs -I{} basename -s ".xml" {} | xargs | sed -e 's/ /", "/g')
    if [[ -z $vm_list ]]; then
        vm_list="[]"
    else
        vm_list="[\"$vm_list\"]"
    fi
fi

### print json
echo -en "{\"facts\": {\n"
echo -en "\t\"name\": \"$name\",\n"
echo -en "\t\"asset_no\": \"$asset_no\",\n"
echo -en "\t\"object_type\": \"$machine_type\",\n"
echo -en "\t\"attrs\": {\n"
echo -en "\t\t\"FQDN\": \"$fqdn\",\n"
[[ $machine_type != "vm" ]] && echo -en "\t\t\"HW type\": \"$hw_type\",\n"
[[ $machine_type != "vm" ]] && echo -en "\t\t\"Hypervisor\": \"$hypervisor\",\n"
echo -en "\t\t\"SW type\": \"$sw_type\"\n"
echo -en "\t\t},\n"

### Network

### IPMI
ipmitool lan print > /dev/null 2>&1
if [[ $? -eq 0 ]]; then
    ipmi_mac=$(ipmitool lan print | grep -iPo '(mac address\s*:\s*)\K([[:alnum:]]{2}:?){6}' | head -n 1)
    ipmi_ip=$(ipmitool lan print | grep -iPo '(ip address\s*:\s*)\K([[:digit:]]{1,3}\.?){4}' | head -n 1)
    [[ $ipmi_ip == '0.0.0.0' ]] && unset ipmi_ip
fi

### Ports
echo -en "\t\"ports\": {\n"

first=1
for nic in $(cat /proc/net/dev | tail -n +3 |  awk '{print $1}' | awk -F':' '{print $1}')
do
	[[ -n $skip_ports ]] && [[ $nic =~ $skip_ports ]] && continue
	mac=$(ip a show dev $nic | grep -Po '(ether )\K([[:alnum:]]{2}:?){6}')
	[[ $first -ne 1 ]] && echo -en ",\n"
	echo -en "\t\t\"$nic\": \"$mac\""
	mac=""
    first=0
done
# don't register ipmi port unless there's ip on it
[[ -n $ipmi_ip ]] && echo -en ",\n\t\t\"ipmi\": \"$ipmi_mac\"\n"
[[ $first -ne 1 ]] && [[ -z $ipmi_ip ]] && echo -en "\n"

echo -en "\t\t},\n"

### IPs
echo -en "\t\"ips\": {\n"
first=1
for nic in $(cat /proc/net/dev | tail -n +3 |  awk '{print $1}' | awk -F':' '{print $1}')
do
	[[ -n $skip_ports ]] && [[ $nic =~ $skip_ports ]] && continue
	ips=$(ip a show dev $nic | grep -Po '(inet )\K([[:digit:]]{1,3}\.?){4}' | xargs )
	for ip in $ips
	do
	    [[ $first -ne 1 ]] && echo -en ",\n"
	    echo -en "\t\t\"$ip\": \"$nic\""
	    first=0
    done
done
[[ -n $ipmi_ip ]] && echo -en ",\n\t\t\"$ipmi_ip\": \"ipmi\"\n"
[[ $first -ne 1 ]] && [[ -z $ipmi_ip ]] && echo -en "\n"
echo -en "\t\t}\n"
echo -en "\t},\n"

echo -en "\"msg\": \"\",\n"
# Won't ever change anything
echo -en "\"changed\": false,\n"
# Maybe it would make sense to validate json
# e.g. without installing any extra utils:
# echo $json | python -c "exec(\"import json\nimport sys\ntry:\n  json.load(sys.stdin)\n  sys.exit(0)\nexcept:\n  sys.exit(1) \")"
echo -en "\"failed\": false\n"


echo -en "}\n"

